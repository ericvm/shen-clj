"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V2635) (cond ((and (cons? V2635) (and (cons? (tl V2635)) (= () (tl (tl V2635))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V2635)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V2637) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V2637) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2637) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V2639) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V2639) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V2639) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V2641) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V2641) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2641) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V2643) (let YaccParse (if (and (cons? (hd V2643)) (= if (hd (hd V2643)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V2643)) (shen.hdtl V2643))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V2643)) (= let (hd (hd V2643)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V2643)) (shen.hdtl V2643))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V2645) (if (cons? (hd V2645)) (let Parse_X (hd (hd V2645)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2645)) (shen.hdtl V2645))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V2647) (if (cons? (hd V2647)) (let Parse_X (hd (hd V2647)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V2647)) (shen.hdtl V2647))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V2649) (cond ((and (cons? V2649) (and (cons? (tl V2649)) (and (cons? (tl (tl V2649))) (and (= () (tl (tl (tl V2649)))) (= (hd (tl V2649)) bar!))))) (cons (hd V2649) (hd (tl (tl V2649))))) ((cons? V2649) (cons (shen.remove-bar (hd V2649)) (shen.remove-bar (tl V2649)))) (true V2649)))

(defun shen.<premises> (V2651) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V2651) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2651) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V2653) (if (cons? (hd V2653)) (let Parse_X (hd (hd V2653)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V2653)) (shen.hdtl V2653))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V2655) (let YaccParse (if (and (cons? (hd V2655)) (= ! (hd (hd V2655)))) (shen.pair (hd (shen.pair (tl (hd V2655)) (shen.hdtl V2655))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2655) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2655) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V2657) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V2657) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V2657) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V2660 V2661) (@p V2660 V2661))

(defun shen.<formulae> (V2663) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2663) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V2663) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2663) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V2665) (if (cons? (hd V2665)) (let Parse_X (hd (hd V2665)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V2665)) (shen.hdtl V2665))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V2667) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V2667) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V2667) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V2669) (let Parse_shen.<expr> (shen.<expr> V2669) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V2671) (if (cons? (hd V2671)) (let Parse_X (hd (hd V2671)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2671)) (shen.hdtl V2671))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V2673) (if (cons? (hd V2673)) (let Parse_X (hd (hd V2673)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2673)) (shen.hdtl V2673))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V2675) (and (symbol? V2675) (shen.sh? (str V2675))))

(defun shen.sh? (V2677) (cond ((= "_" V2677) true) (true (and (= (pos V2677 0) "_") (shen.sh? (tlstr V2677))))))

(defun shen.doubleunderline? (V2679) (and (symbol? V2679) (shen.dh? (str V2679))))

(defun shen.dh? (V2681) (cond ((= "=" V2681) true) (true (and (= (pos V2681 0) "=") (shen.dh? (tlstr V2681))))))

(defun shen.process-datatype (V2684 V2685) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V2684 V2685))))

(defun shen.remember-datatype (V2691) (cond ((cons? V2691) (do (set shen.*datatypes* (adjoin (hd V2691) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V2691) (value shen.*alldatatypes*))) (hd V2691)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V2696 V2697) (cond ((= () V2697) ()) ((and (cons? V2697) (and (tuple? (hd V2697)) (= shen.single (fst (hd V2697))))) (cons (shen.rule->horn-clause V2696 (snd (hd V2697))) (shen.rules->horn-clauses V2696 (tl V2697)))) ((and (cons? V2697) (and (tuple? (hd V2697)) (= shen.double (fst (hd V2697))))) (shen.rules->horn-clauses V2696 (append (shen.double->singles (snd (hd V2697))) (tl V2697)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V2699) (cons (shen.right-rule V2699) (cons (shen.left-rule V2699) ())))

(defun shen.right-rule (V2701) (@p shen.single V2701))

(defun shen.left-rule (V2703) (cond ((and (cons? V2703) (and (cons? (tl V2703)) (and (cons? (tl (tl V2703))) (and (tuple? (hd (tl (tl V2703)))) (and (= () (fst (hd (tl (tl V2703))))) (= () (tl (tl (tl V2703))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V2703)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V2703))) Q) ()) (@p shen.single (cons (hd V2703) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V2709) (cond ((and (tuple? V2709) (= () (fst V2709))) (snd V2709)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V2712 V2713) (cond ((and (cons? V2713) (and (cons? (tl V2713)) (and (cons? (tl (tl V2713))) (and (tuple? (hd (tl (tl V2713)))) (= () (tl (tl (tl V2713)))))))) (cons (shen.rule->horn-clause-head V2712 (snd (hd (tl (tl V2713))))) (cons :- (cons (shen.rule->horn-clause-body (hd V2713) (hd (tl V2713)) (fst (hd (tl (tl V2713))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V2716 V2717) (cons V2716 (cons (shen.mode-ify V2717) (cons Context_1957 ()))))

(defun shen.mode-ify (V2719) (cond ((and (cons? V2719) (and (cons? (tl V2719)) (and (= : (hd (tl V2719))) (and (cons? (tl (tl V2719))) (= () (tl (tl (tl V2719)))))))) (cons mode (cons (cons (hd V2719) (cons : (cons (cons mode (cons (hd (tl (tl V2719))) (cons + ()))) ()))) (cons - ())))) (true V2719)))

(defun shen.rule->horn-clause-body (V2723 V2724 V2725) (let Variables (map (lambda X (shen.extract_vars X)) V2725) (let Predicates (map (lambda X (gensym shen.cl)) V2725) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V2725 Variables) (let SideLiterals (shen.construct-side-literals V2723) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V2725))) V2724) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V2734 V2735 V2736 V2737) (cond ((and (= () V2734) (= () V2735)) ()) (true (shen.csl-help V2734 V2735 V2736 V2737))))

(defun shen.csl-help (V2744 V2745 V2746 V2747) (cond ((and (= () V2744) (= () V2745)) (cons (cons bind (cons ContextOut_1957 (cons V2746 ()))) ())) ((and (cons? V2744) (cons? V2745)) (cons (cons (hd V2744) (cons V2746 (cons V2747 (hd V2745)))) (shen.csl-help (tl V2744) (tl V2745) V2747 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V2751 V2752 V2753) (cond ((and (= () V2751) (and (= () V2752) (= () V2753))) shen.skip) ((and (cons? V2751) (and (cons? V2752) (cons? V2753))) (do (shen.construct-search-clause (hd V2751) (hd V2752) (hd V2753)) (shen.construct-search-clauses (tl V2751) (tl V2752) (tl V2753)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V2757 V2758 V2759) (shen.s-prolog (cons (shen.construct-base-search-clause V2757 V2758 V2759) (cons (shen.construct-recursive-search-clause V2757 V2758 V2759) ()))))

(defun shen.construct-base-search-clause (V2763 V2764 V2765) (cons (cons V2763 (cons (cons (shen.mode-ify V2764) In_1957) (cons In_1957 V2765))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V2769 V2770 V2771) (cons (cons V2769 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V2771))) (cons :- (cons (cons (cons V2769 (cons Assumptions_1957 (cons Out_1957 V2771))) ()) ()))))

(defun shen.construct-side-literals (V2777) (cond ((= () V2777) ()) ((and (cons? V2777) (and (cons? (hd V2777)) (and (= if (hd (hd V2777))) (and (cons? (tl (hd V2777))) (= () (tl (tl (hd V2777)))))))) (cons (cons when (tl (hd V2777))) (shen.construct-side-literals (tl V2777)))) ((and (cons? V2777) (and (cons? (hd V2777)) (and (= let (hd (hd V2777))) (and (cons? (tl (hd V2777))) (and (cons? (tl (tl (hd V2777)))) (= () (tl (tl (tl (hd V2777)))))))))) (cons (cons is (tl (hd V2777))) (shen.construct-side-literals (tl V2777)))) ((cons? V2777) (shen.construct-side-literals (tl V2777))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V2784 V2785) (cond ((tuple? V2784) (cons shen.t* (cons (shen.recursive_cons_form (snd V2784)) (cons (shen.construct-context V2785 (fst V2784)) ())))) ((= ! V2784) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V2788 V2789) (cond ((and (= true V2788) (= () V2789)) Context_1957) ((and (= false V2788) (= () V2789)) ContextOut_1957) ((cons? V2789) (cons cons (cons (shen.recursive_cons_form (hd V2789)) (cons (shen.construct-context V2788 (tl V2789)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V2791) (cond ((cons? V2791) (cons cons (cons (shen.recursive_cons_form (hd V2791)) (cons (shen.recursive_cons_form (tl V2791)) ())))) (true V2791)))

(defun preclude (V2793) (shen.preclude-h (map (lambda X (shen.intern-type X)) V2793)))

(defun shen.preclude-h (V2795) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V2795)) (value shen.*datatypes*)))

(defun include (V2797) (shen.include-h (map (lambda X (shen.intern-type X)) V2797)))

(defun shen.include-h (V2799) (let ValidTypes (intersection V2799 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V2801) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2801))))

(defun include-all-but (V2803) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V2803))))

(defun shen.synonyms-help (V2809) (cond ((= () V2809) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V2809) (cons? (tl V2809))) (let Vs (difference (shen.extract_vars (hd (tl V2809))) (shen.extract_vars (hd V2809))) (if (empty? Vs) (do (shen.pushnew (cons (hd V2809) (cons (hd (tl V2809)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V2809)))) (shen.free_variable_warnings (hd (tl V2809)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V2812 V2813) (if (element? V2812 (value V2813)) (value V2813) (set V2813 (cons V2812 (value V2813)))))

(defun shen.demod-rule (V2815) (cond ((and (cons? V2815) (and (cons? (tl V2815)) (= () (tl (tl V2815))))) (cons (shen.rcons_form (hd V2815)) (cons -> (cons (shen.rcons_form (hd (tl V2815))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V2821) (cond ((and (cons? V2821) (and (= defun (hd V2821)) (and (cons? (tl V2821)) (and (cons? (tl (tl V2821))) (and (cons? (hd (tl (tl V2821)))) (and (= () (tl (hd (tl (tl V2821))))) (and (cons? (tl (tl (tl V2821)))) (= () (tl (tl (tl (tl V2821)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V2821)))) (tl (tl (tl V2821))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V2824 V2825) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V2825 (shen.default-rule))))))) (do (if V2824 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))



