"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.dict (V3255) (cond ((< V3255 1) (simple-error (cn "invalid initial dict size: " (shen.app V3255 "" shen.s)))) (true (let D (absvector (+ 3 V3255)) (let Tag (address-> D 0 shen.dictionary) (let Capacity (address-> D 1 V3255) (let Count (address-> D 2 0) (let Fill (shen.fillvector D 3 (+ 2 V3255) ()) D))))))))

(defun shen.dict? (V3257) (and (absvector? V3257) (= (trap-error (<-address V3257 0) (lambda E shen.not-dictionary)) shen.dictionary)))

(defun shen.dict-capacity (V3259) (<-address V3259 1))

(defun shen.dict-count (V3261) (<-address V3261 2))

(defun shen.dict-count-> (V3264 V3265) (address-> V3264 2 V3265))

(defun shen.<-dict-bucket (V3268 V3269) (<-address V3268 (+ 3 V3269)))

(defun shen.dict-bucket-> (V3273 V3274 V3275) (address-> V3273 (+ 3 V3274) V3275))

(defun shen.dict-update-count (V3279 V3280 V3281) (let Diff (- (length V3281) (length V3280)) (shen.dict-count-> V3279 (+ Diff (shen.dict-count V3279)))))

(defun shen.dict-> (V3285 V3286 V3287) (let N (hash V3286 (shen.dict-capacity V3285)) (let Bucket (shen.<-dict-bucket V3285 N) (let NewBucket (shen.assoc-set V3286 V3287 Bucket) (let Change (shen.dict-bucket-> V3285 N NewBucket) (let Count (shen.dict-update-count V3285 Bucket NewBucket) V3287))))))

(defun shen.<-dict (V3290 V3291) (let N (hash V3291 (shen.dict-capacity V3290)) (let Bucket (shen.<-dict-bucket V3290 N) (let Result (assoc V3291 Bucket) (if (empty? Result) (simple-error (cn "value " (shen.app V3291 " not found in dict
" shen.a))) (tl Result))))))

(defun shen.dict-rm (V3294 V3295) (let N (hash V3295 (shen.dict-capacity V3294)) (let Bucket (shen.<-dict-bucket V3294 N) (let NewBucket (shen.assoc-rm V3295 Bucket) (let Change (shen.dict-bucket-> V3294 N NewBucket) (let Count (shen.dict-update-count V3294 Bucket NewBucket) V3295))))))

(defun shen.dict-fold (V3299 V3300 V3301) (let Limit (shen.dict-capacity V3300) (shen.dict-fold-h V3299 V3300 V3301 0 Limit)))

(defun shen.dict-fold-h (V3308 V3309 V3310 V3311 V3312) (cond ((= V3312 V3311) V3310) (true (let B (shen.<-dict-bucket V3309 V3311) (let Acc (shen.bucket-fold V3308 B V3310) (shen.dict-fold-h V3308 V3309 Acc (+ 1 V3311) V3312))))))

(defun shen.bucket-fold (V3316 V3317 V3318) (cond ((= () V3317) V3318) ((and (cons? V3317) (cons? (hd V3317))) (V3316 (hd (hd V3317)) (tl (hd V3317)) (shen.bucket-fold V3316 (tl V3317) V3318))) (true (shen.f_error shen.bucket-fold))))

(defun shen.dict-keys (V3320) (shen.dict-fold (lambda K (lambda _ (lambda Acc (cons K Acc)))) V3320 ()))

(defun shen.dict-values (V3322) (shen.dict-fold (lambda _ (lambda V (lambda Acc (cons V Acc)))) V3322 ()))



