"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun thaw (V2827) (V2827))

(defun eval (V2829) (let Macroexpand (shen.walk (lambda Y (macroexpand Y)) V2829) (if (shen.packaged? Macroexpand) (map (lambda Z (shen.eval-without-macros Z)) (shen.package-contents Macroexpand)) (shen.eval-without-macros Macroexpand))))

(defun shen.eval-without-macros (V2831) (eval-kl (shen.elim-def (shen.proc-input+ V2831))))

(defun shen.proc-input+ (V2833) (cond ((and (cons? V2833) (and (= input+ (hd V2833)) (and (cons? (tl V2833)) (and (cons? (tl (tl V2833))) (= () (tl (tl (tl V2833)))))))) (cons input+ (cons (shen.rcons_form (hd (tl V2833))) (tl (tl V2833))))) ((and (cons? V2833) (and (= shen.read+ (hd V2833)) (and (cons? (tl V2833)) (and (cons? (tl (tl V2833))) (= () (tl (tl (tl V2833)))))))) (cons shen.read+ (cons (shen.rcons_form (hd (tl V2833))) (tl (tl V2833))))) ((cons? V2833) (map (lambda Z (shen.proc-input+ Z)) V2833)) (true V2833)))

(defun shen.elim-def (V2835) (cond ((and (cons? V2835) (and (= define (hd V2835)) (cons? (tl V2835)))) (shen.shen->kl (hd (tl V2835)) (tl (tl V2835)))) ((and (cons? V2835) (and (= defmacro (hd V2835)) (cons? (tl V2835)))) (let Default (cons X (cons -> (cons X ()))) (let Def (shen.elim-def (cons define (cons (hd (tl V2835)) (append (tl (tl V2835)) Default)))) (let MacroAdd (shen.add-macro (hd (tl V2835))) Def)))) ((and (cons? V2835) (and (= defcc (hd V2835)) (cons? (tl V2835)))) (shen.elim-def (shen.yacc V2835))) ((cons? V2835) (map (lambda Z (shen.elim-def Z)) V2835)) (true V2835)))

(defun shen.add-macro (V2837) (let MacroReg (value shen.*macroreg*) (let NewMacroReg (set shen.*macroreg* (adjoin V2837 (value shen.*macroreg*))) (if (= MacroReg NewMacroReg) shen.skip (set *macros* (cons (function V2837) (value *macros*)))))))

(defun shen.packaged? (V2845) (cond ((and (cons? V2845) (and (= package (hd V2845)) (and (cons? (tl V2845)) (cons? (tl (tl V2845)))))) true) (true false)))

(defun external (V2847) (trap-error (get V2847 shen.external-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V2847 " has not been used.
" shen.a))))))

(defun internal (V2849) (trap-error (get V2849 shen.internal-symbols (value *property-vector*)) (lambda E (simple-error (cn "package " (shen.app V2849 " has not been used.
" shen.a))))))

(defun shen.package-contents (V2853) (cond ((and (cons? V2853) (and (= package (hd V2853)) (and (cons? (tl V2853)) (and (= null (hd (tl V2853))) (cons? (tl (tl V2853))))))) (tl (tl (tl V2853)))) ((and (cons? V2853) (and (= package (hd V2853)) (and (cons? (tl V2853)) (cons? (tl (tl V2853)))))) (let PackageNameDot (intern (cn (str (hd (tl V2853))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (shen.packageh (hd (tl V2853)) (hd (tl (tl V2853))) (tl (tl (tl V2853))) ExpPackageNameDot)))) (true (shen.f_error shen.package-contents))))

(defun shen.walk (V2856 V2857) (cond ((cons? V2857) (V2856 (map (lambda Z (shen.walk V2856 Z)) V2857))) (true (V2856 V2857))))

(defun compile (V2861 V2862 V2863) (let O (V2861 (cons V2862 (cons () ()))) (if (or (= (fail) O) (not (empty? (hd O)))) (V2863 O) (shen.hdtl O))))

(defun fail-if (V2866 V2867) (if (V2866 V2867) (fail) V2867))

(defun @s (V2870 V2871) (cn V2870 V2871))

(defun tc? () (value shen.*tc*))

(defun ps (V2873) (trap-error (get V2873 shen.source (value *property-vector*)) (lambda E (simple-error (shen.app V2873 " not found.
" shen.a)))))

(defun stinput () (value *stinput*))

(defun vector (V2875) (let Vector (absvector (+ V2875 1)) (let ZeroStamp (address-> Vector 0 V2875) (let Standard (if (= V2875 0) ZeroStamp (shen.fillvector ZeroStamp 1 V2875 (fail))) Standard))))

(defun shen.fillvector (V2881 V2882 V2883 V2884) (cond ((= V2883 V2882) (address-> V2881 V2883 V2884)) (true (shen.fillvector (address-> V2881 V2882 V2884) (+ 1 V2882) V2883 V2884))))

(defun vector? (V2886) (and (absvector? V2886) (let X (trap-error (<-address V2886 0) (lambda E -1)) (and (number? X) (>= X 0)))))

(defun vector-> (V2890 V2891 V2892) (if (= V2891 0) (simple-error "cannot access 0th element of a vector
") (address-> V2890 V2891 V2892)))

(defun <-vector (V2895 V2896) (if (= V2896 0) (simple-error "cannot access 0th element of a vector
") (let VectorElement (<-address V2895 V2896) (if (= VectorElement (fail)) (simple-error "vector element not found
") VectorElement))))

(defun shen.posint? (V2898) (and (integer? V2898) (>= V2898 0)))

(defun limit (V2900) (<-address V2900 0))

(defun symbol? (V2902) (cond ((or (boolean? V2902) (or (number? V2902) (string? V2902))) false) (true (trap-error (let String (str V2902) (shen.analyse-symbol? String)) (lambda E false)))))

(defun shen.analyse-symbol? (V2904) (cond ((= "" V2904) false) ((shen.+string? V2904) (and (shen.alpha? (pos V2904 0)) (shen.alphanums? (tlstr V2904)))) (true (shen.f_error shen.analyse-symbol?))))

(defun shen.alpha? (V2906) (element? V2906 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" (cons "a" (cons "b" (cons "c" (cons "d" (cons "e" (cons "f" (cons "g" (cons "h" (cons "i" (cons "j" (cons "k" (cons "l" (cons "m" (cons "n" (cons "o" (cons "p" (cons "q" (cons "r" (cons "s" (cons "t" (cons "u" (cons "v" (cons "w" (cons "x" (cons "y" (cons "z" (cons "=" (cons "*" (cons "/" (cons "+" (cons "-" (cons "_" (cons "?" (cons "$" (cons "!" (cons "@" (cons "~" (cons ">" (cons "<" (cons "&" (cons "%" (cons "{" (cons "}" (cons ":" (cons ";" (cons "`" (cons "#" (cons "'" (cons "." ())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(defun shen.alphanums? (V2908) (cond ((= "" V2908) true) ((shen.+string? V2908) (and (shen.alphanum? (pos V2908 0)) (shen.alphanums? (tlstr V2908)))) (true (shen.f_error shen.alphanums?))))

(defun shen.alphanum? (V2910) (or (shen.alpha? V2910) (shen.digit? V2910)))

(defun shen.digit? (V2912) (element? V2912 (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))

(defun variable? (V2914) (cond ((or (boolean? V2914) (or (number? V2914) (string? V2914))) false) (true (trap-error (let String (str V2914) (shen.analyse-variable? String)) (lambda E false)))))

(defun shen.analyse-variable? (V2916) (cond ((shen.+string? V2916) (and (shen.uppercase? (pos V2916 0)) (shen.alphanums? (tlstr V2916)))) (true (shen.f_error shen.analyse-variable?))))

(defun shen.uppercase? (V2918) (element? V2918 (cons "A" (cons "B" (cons "C" (cons "D" (cons "E" (cons "F" (cons "G" (cons "H" (cons "I" (cons "J" (cons "K" (cons "L" (cons "M" (cons "N" (cons "O" (cons "P" (cons "Q" (cons "R" (cons "S" (cons "T" (cons "U" (cons "V" (cons "W" (cons "X" (cons "Y" (cons "Z" ()))))))))))))))))))))))))))))

(defun gensym (V2920) (concat V2920 (set shen.*gensym* (+ 1 (value shen.*gensym*)))))

(defun concat (V2923 V2924) (intern (cn (str V2923) (str V2924))))

(defun @p (V2927 V2928) (let Vector (absvector 3) (let Tag (address-> Vector 0 shen.tuple) (let Fst (address-> Vector 1 V2927) (let Snd (address-> Vector 2 V2928) Vector)))))

(defun fst (V2930) (<-address V2930 1))

(defun snd (V2932) (<-address V2932 2))

(defun tuple? (V2934) (and (absvector? V2934) (= shen.tuple (trap-error (<-address V2934 0) (lambda E shen.not-tuple)))))

(defun append (V2937 V2938) (cond ((= () V2937) V2938) ((cons? V2937) (cons (hd V2937) (append (tl V2937) V2938))) (true (shen.f_error append))))

(defun @v (V2941 V2942) (let Limit (limit V2942) (let NewVector (vector (+ Limit 1)) (let X+NewVector (vector-> NewVector 1 V2941) (if (= Limit 0) X+NewVector (shen.@v-help V2942 1 Limit X+NewVector))))))

(defun shen.@v-help (V2948 V2949 V2950 V2951) (cond ((= V2950 V2949) (shen.copyfromvector V2948 V2951 V2950 (+ V2950 1))) (true (shen.@v-help V2948 (+ V2949 1) V2950 (shen.copyfromvector V2948 V2951 V2949 (+ V2949 1))))))

(defun shen.copyfromvector (V2956 V2957 V2958 V2959) (trap-error (vector-> V2957 V2959 (<-vector V2956 V2958)) (lambda E V2957)))

(defun hdv (V2961) (trap-error (<-vector V2961 1) (lambda E (simple-error (cn "hdv needs a non-empty vector as an argument; not " (shen.app V2961 "
" shen.s))))))

(defun tlv (V2963) (let Limit (limit V2963) (if (= Limit 0) (simple-error "cannot take the tail of the empty vector
") (if (= Limit 1) (vector 0) (let NewVector (vector (- Limit 1)) (shen.tlv-help V2963 2 Limit (vector (- Limit 1))))))))

(defun shen.tlv-help (V2969 V2970 V2971 V2972) (cond ((= V2971 V2970) (shen.copyfromvector V2969 V2972 V2971 (- V2971 1))) (true (shen.tlv-help V2969 (+ V2970 1) V2971 (shen.copyfromvector V2969 V2972 V2970 (- V2970 1))))))

(defun assoc (V2984 V2985) (cond ((= () V2985) ()) ((and (cons? V2985) (and (cons? (hd V2985)) (= (hd (hd V2985)) V2984))) (hd V2985)) ((cons? V2985) (assoc V2984 (tl V2985))) (true (shen.f_error assoc))))

(defun shen.assoc-set (V2992 V2993 V2994) (cond ((= () V2994) (cons (cons V2992 V2993) ())) ((and (cons? V2994) (and (cons? (hd V2994)) (= (hd (hd V2994)) V2992))) (cons (cons (hd (hd V2994)) V2993) (tl V2994))) ((cons? V2994) (cons (hd V2994) (shen.assoc-set V2992 V2993 (tl V2994)))) (true (shen.f_error shen.assoc-set))))

(defun shen.assoc-rm (V3000 V3001) (cond ((= () V3001) ()) ((and (cons? V3001) (and (cons? (hd V3001)) (= (hd (hd V3001)) V3000))) (tl V3001)) ((cons? V3001) (cons (hd V3001) (shen.assoc-rm V3000 (tl V3001)))) (true (shen.f_error shen.assoc-rm))))

(defun boolean? (V3007) (cond ((= true V3007) true) ((= false V3007) true) (true false)))

(defun nl (V3009) (cond ((= 0 V3009) 0) (true (do (shen.prhush "
" (stoutput)) (nl (- V3009 1))))))

(defun difference (V3014 V3015) (cond ((= () V3014) ()) ((cons? V3014) (if (element? (hd V3014) V3015) (difference (tl V3014) V3015) (cons (hd V3014) (difference (tl V3014) V3015)))) (true (shen.f_error difference))))

(defun do (V3018 V3019) V3019)

(defun element? (V3031 V3032) (cond ((= () V3032) false) ((and (cons? V3032) (= (hd V3032) V3031)) true) ((cons? V3032) (element? V3031 (tl V3032))) (true (shen.f_error element?))))

(defun empty? (V3038) (cond ((= () V3038) true) (true false)))

(defun fix (V3041 V3042) (shen.fix-help V3041 V3042 (V3041 V3042)))

(defun shen.fix-help (V3053 V3054 V3055) (cond ((= V3055 V3054) V3055) (true (shen.fix-help V3053 V3055 (V3053 V3055)))))

(defun put (V3060 V3061 V3062 V3063) (let Curr (trap-error (shen.<-dict V3063 V3060) (lambda E ())) (let Added (shen.assoc-set V3061 V3062 Curr) (let Update (shen.dict-> V3063 V3060 Added) V3062))))

(defun unput (V3067 V3068 V3069) (let Curr (trap-error (shen.<-dict V3069 V3067) (lambda E ())) (let Removed (shen.assoc-rm V3068 Curr) (let Update (shen.dict-> V3069 V3067 Removed) V3067))))

(defun get (V3073 V3074 V3075) (let Entry (trap-error (shen.<-dict V3075 V3073) (lambda E ())) (let Result (assoc V3074 Entry) (if (empty? Result) (simple-error "value not found
") (tl Result)))))

(defun hash (V3078 V3079) (shen.mod (sum (map (lambda X (string->n X)) (explode V3078))) V3079))

(defun shen.mod (V3082 V3083) (shen.modh V3082 (shen.multiples V3082 (cons V3083 ()))))

(defun shen.multiples (V3086 V3087) (cond ((and (cons? V3087) (> (hd V3087) V3086)) (tl V3087)) ((cons? V3087) (shen.multiples V3086 (cons (* 2 (hd V3087)) V3087))) (true (shen.f_error shen.multiples))))

(defun shen.modh (V3092 V3093) (cond ((= 0 V3092) 0) ((= () V3093) V3092) ((and (cons? V3093) (> (hd V3093) V3092)) (if (empty? (tl V3093)) V3092 (shen.modh V3092 (tl V3093)))) ((cons? V3093) (shen.modh (- V3092 (hd V3093)) V3093)) (true (shen.f_error shen.modh))))

(defun sum (V3095) (cond ((= () V3095) 0) ((cons? V3095) (+ (hd V3095) (sum (tl V3095)))) (true (shen.f_error sum))))

(defun head (V3103) (cond ((cons? V3103) (hd V3103)) (true (simple-error "head expects a non-empty list"))))

(defun tail (V3111) (cond ((cons? V3111) (tl V3111)) (true (simple-error "tail expects a non-empty list"))))

(defun hdstr (V3113) (pos V3113 0))

(defun intersection (V3118 V3119) (cond ((= () V3118) ()) ((cons? V3118) (if (element? (hd V3118) V3119) (cons (hd V3118) (intersection (tl V3118) V3119)) (intersection (tl V3118) V3119))) (true (shen.f_error intersection))))

(defun reverse (V3121) (shen.reverse_help V3121 ()))

(defun shen.reverse_help (V3124 V3125) (cond ((= () V3124) V3125) ((cons? V3124) (shen.reverse_help (tl V3124) (cons (hd V3124) V3125))) (true (shen.f_error shen.reverse_help))))

(defun union (V3128 V3129) (cond ((= () V3128) V3129) ((cons? V3128) (if (element? (hd V3128) V3129) (union (tl V3128) V3129) (cons (hd V3128) (union (tl V3128) V3129)))) (true (shen.f_error union))))

(defun y-or-n? (V3131) (let Message (shen.prhush (shen.proc-nl V3131) (stoutput)) (let Y-or-N (shen.prhush " (y/n) " (stoutput)) (let Input (shen.app (read (stinput)) "" shen.s) (if (= "y" Input) true (if (= "n" Input) false (do (shen.prhush "please answer y or n
" (stoutput)) (y-or-n? V3131))))))))

(defun not (V3133) (if V3133 false true))

(defun subst (V3146 V3147 V3148) (cond ((= V3148 V3147) V3146) ((cons? V3148) (map (lambda W (subst V3146 V3147 W)) V3148)) (true V3148)))

(defun explode (V3150) (shen.explode-h (shen.app V3150 "" shen.a)))

(defun shen.explode-h (V3152) (cond ((= "" V3152) ()) ((shen.+string? V3152) (cons (pos V3152 0) (shen.explode-h (tlstr V3152)))) (true (shen.f_error shen.explode-h))))

(defun cd (V3154) (set *home-directory* (if (= V3154 "") "" (shen.app V3154 "/" shen.a))))

(defun shen.for-each (V3157 V3158) (cond ((= () V3158) true) ((cons? V3158) (let _ (V3157 (hd V3158)) (shen.for-each V3157 (tl V3158)))) (true (shen.f_error shen.for-each))))

(defun map (V3161 V3162) (shen.map-h V3161 V3162 ()))

(defun shen.map-h (V3168 V3169 V3170) (cond ((= () V3169) (reverse V3170)) ((cons? V3169) (shen.map-h V3168 (tl V3169) (cons (V3168 (hd V3169)) V3170))) (true (shen.f_error shen.map-h))))

(defun length (V3172) (shen.length-h V3172 0))

(defun shen.length-h (V3175 V3176) (cond ((= () V3175) V3176) (true (shen.length-h (tl V3175) (+ V3176 1)))))

(defun occurrences (V3188 V3189) (cond ((= V3189 V3188) 1) ((cons? V3189) (+ (occurrences V3188 (hd V3189)) (occurrences V3188 (tl V3189)))) (true 0)))

(defun nth (V3196 V3197) (cond ((and (= 1 V3196) (cons? V3197)) (hd V3197)) ((cons? V3197) (nth (- V3196 1) (tl V3197))) (true (simple-error (cn "nth applied to " (shen.app V3196 (cn ", " (shen.app V3197 "
" shen.a)) shen.a))))))

(defun integer? (V3199) (and (number? V3199) (let Abs (shen.abs V3199) (shen.integer-test? Abs (shen.magless Abs 1)))))

(defun shen.abs (V3201) (if (> V3201 0) V3201 (- 0 V3201)))

(defun shen.magless (V3204 V3205) (let Nx2 (* V3205 2) (if (> Nx2 V3204) V3205 (shen.magless V3204 Nx2))))

(defun shen.integer-test? (V3211 V3212) (cond ((= 0 V3211) true) ((> 1 V3211) false) (true (let Abs-N (- V3211 V3212) (if (> 0 Abs-N) (integer? V3211) (shen.integer-test? Abs-N V3212))))))

(defun mapcan (V3217 V3218) (cond ((= () V3218) ()) ((cons? V3218) (append (V3217 (hd V3218)) (mapcan V3217 (tl V3218)))) (true (shen.f_error mapcan))))

(defun == (V3230 V3231) (cond ((= V3231 V3230) true) (true false)))

(defun abort () (simple-error ""))

(defun bound? (V3233) (and (symbol? V3233) (let Val (trap-error (value V3233) (lambda E shen.this-symbol-is-unbound)) (if (= Val shen.this-symbol-is-unbound) false true))))

(defun shen.string->bytes (V3235) (cond ((= "" V3235) ()) (true (cons (string->n (pos V3235 0)) (shen.string->bytes (tlstr V3235))))))

(defun maxinferences (V3237) (set shen.*maxinferences* V3237))

(defun inferences () (value shen.*infs*))

(defun protect (V3239) V3239)

(defun stoutput () (value *stoutput*))

(defun sterror () (value *sterror*))

(defun string->symbol (V3241) (let Symbol (intern V3241) (if (symbol? Symbol) Symbol (simple-error (cn "cannot intern " (shen.app V3241 " to a symbol" shen.s))))))

(defun optimise (V3247) (cond ((= + V3247) (set shen.*optimise* true)) ((= - V3247) (set shen.*optimise* false)) (true (simple-error "optimise expects a + or a -.
"))))

(defun os () (value *os*))

(defun language () (value *language*))

(defun version () (value *version*))

(defun port () (value *port*))

(defun porters () (value *porters*))

(defun implementation () (value *implementation*))

(defun release () (value *release*))

(defun package? (V3249) (trap-error (do (external V3249) true) (lambda E false)))

(defun function (V3251) (shen.lookup-func V3251))

(defun shen.lookup-func (V3253) (trap-error (get V3253 shen.lambda-form (value *property-vector*)) (lambda E (simple-error (shen.app V3253 " has no lambda expansion
" shen.a)))))



