"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V4275) (cond ((and (cons? V4275) (and (= defcc (hd V4275)) (cons? (tl V4275)))) (shen.yacc->shen (hd (tl V4275)) (tl (tl V4275)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V4278 V4279) (let CCRules (shen.split_cc_rules true V4279 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V4278 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V4281) (cond ((> (occurrences kill V4281) 0) (cons trap-error (cons V4281 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V4281)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V4283) (let String (error-to-string V4283) (if (= String "yacc kill") (fail) V4283)))

(defun shen.split_cc_rules (V4289 V4290 V4291) (cond ((and (= () V4290) (= () V4291)) ()) ((= () V4290) (cons (shen.split_cc_rule V4289 (reverse V4291) ()) ())) ((and (cons? V4290) (= ; (hd V4290))) (cons (shen.split_cc_rule V4289 (reverse V4291) ()) (shen.split_cc_rules V4289 (tl V4290) ()))) ((cons? V4290) (shen.split_cc_rules V4289 (tl V4290) (cons (hd V4290) V4291))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V4299 V4300 V4301) (cond ((and (cons? V4300) (and (= := (hd V4300)) (and (cons? (tl V4300)) (= () (tl (tl V4300)))))) (cons (reverse V4301) (tl V4300))) ((and (cons? V4300) (and (= := (hd V4300)) (and (cons? (tl V4300)) (and (cons? (tl (tl V4300))) (and (= where (hd (tl (tl V4300)))) (and (cons? (tl (tl (tl V4300)))) (= () (tl (tl (tl (tl V4300))))))))))) (cons (reverse V4301) (cons (cons where (cons (hd (tl (tl (tl V4300)))) (cons (hd (tl V4300)) ()))) ()))) ((= () V4300) (do (shen.semantic-completion-warning V4299 V4301) (shen.split_cc_rule V4299 (cons := (cons (shen.default_semantics (reverse V4301)) ())) V4301))) ((cons? V4300) (shen.split_cc_rule V4299 (tl V4300) (cons (hd V4300) V4301))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V4312 V4313) (cond ((= true V4312) (do (shen.prhush "warning: " (stoutput)) (do (shen.for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V4313)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V4315) (cond ((= () V4315) ()) ((and (cons? V4315) (and (= () (tl V4315)) (shen.grammar_symbol? (hd V4315)))) (hd V4315)) ((and (cons? V4315) (shen.grammar_symbol? (hd V4315))) (cons append (cons (hd V4315) (cons (shen.default_semantics (tl V4315)) ())))) ((cons? V4315) (cons cons (cons (hd V4315) (cons (shen.default_semantics (tl V4315)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V4317) (and (symbol? V4317) (let Cs (shen.strip-pathname (explode V4317)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V4319) (cond ((and (cons? V4319) (= () (tl V4319))) (hd V4319)) ((cons? V4319) (let P YaccParse (cons let (cons P (cons (hd V4319) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V4319)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V4321) (cond ((and (cons? V4321) (and (cons? (tl V4321)) (= () (tl (tl V4321))))) (shen.syntax (hd V4321) Stream (hd (tl V4321)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V4325 V4326 V4327) (cond ((and (= () V4325) (and (cons? V4327) (and (= where (hd V4327)) (and (cons? (tl V4327)) (and (cons? (tl (tl V4327))) (= () (tl (tl (tl V4327))))))))) (cons if (cons (shen.semantics (hd (tl V4327))) (cons (cons shen.pair (cons (cons hd (cons V4326 ())) (cons (shen.semantics (hd (tl (tl V4327)))) ()))) (cons (cons fail ()) ()))))) ((= () V4325) (cons shen.pair (cons (cons hd (cons V4326 ())) (cons (shen.semantics V4327) ())))) ((cons? V4325) (if (shen.grammar_symbol? (hd V4325)) (shen.recursive_descent V4325 V4326 V4327) (if (variable? (hd V4325)) (shen.variable-match V4325 V4326 V4327) (if (shen.jump_stream? (hd V4325)) (shen.jump_stream V4325 V4326 V4327) (if (shen.terminal? (hd V4325)) (shen.check_stream V4325 V4326 V4327) (if (cons? (hd V4325)) (shen.list-stream (shen.decons (hd V4325)) (tl V4325) V4326 V4327) (simple-error (shen.app (hd V4325) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V4332 V4333 V4334 V4335) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4334 ())) ())) (cons (cons cons? (cons (cons shen.hdhd (cons V4334 ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V4333 (cons shen.pair (cons (cons shen.tlhd (cons V4334 ())) (cons (cons shen.hdtl (cons V4334 ())) ()))) V4335) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V4332 (cons shen.pair (cons (cons shen.hdhd (cons V4334 ())) (cons (cons shen.hdtl (cons V4334 ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V4337) (cond ((and (cons? V4337) (and (= cons (hd V4337)) (and (cons? (tl V4337)) (and (cons? (tl (tl V4337))) (and (= () (hd (tl (tl V4337)))) (= () (tl (tl (tl V4337))))))))) (cons (hd (tl V4337)) ())) ((and (cons? V4337) (and (= cons (hd V4337)) (and (cons? (tl V4337)) (and (cons? (tl (tl V4337))) (= () (tl (tl (tl V4337)))))))) (cons (hd (tl V4337)) (shen.decons (hd (tl (tl V4337)))))) (true V4337)))

(defun shen.insert-runon (V4352 V4353 V4354) (cond ((and (cons? V4354) (and (= shen.pair (hd V4354)) (and (cons? (tl V4354)) (and (cons? (tl (tl V4354))) (and (= () (tl (tl (tl V4354)))) (= (hd (tl (tl V4354))) V4353)))))) V4352) ((cons? V4354) (map (lambda Z (shen.insert-runon V4352 V4353 Z)) V4354)) (true V4354)))

(defun shen.strip-pathname (V4360) (cond ((not (element? "." V4360)) V4360) ((cons? V4360) (shen.strip-pathname (tl V4360))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V4364 V4365 V4366) (cond ((cons? V4364) (let Test (cons (hd V4364) (cons V4365 ())) (let Action (shen.syntax (tl V4364) (concat Parse_ (hd V4364)) V4366) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V4364)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V4364)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V4370 V4371 V4372) (cond ((cons? V4370) (let Test (cons cons? (cons (cons hd (cons V4371 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V4370)) (cons (cons shen.hdhd (cons V4371 ())) (cons (shen.syntax (tl V4370) (cons shen.pair (cons (cons shen.tlhd (cons V4371 ())) (cons (cons shen.hdtl (cons V4371 ())) ()))) V4372) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V4382) (cond ((cons? V4382) false) ((variable? V4382) false) (true true)))

(defun shen.jump_stream? (V4388) (cond ((= V4388 _) true) (true false)))

(defun shen.check_stream (V4392 V4393 V4394) (cond ((cons? V4392) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V4393 ())) ())) (cons (cons = (cons (hd V4392) (cons (cons shen.hdhd (cons V4393 ())) ()))) ()))) (let NewStr (gensym NewStream) (let Action (cons let (cons NewStr (cons (cons shen.pair (cons (cons shen.tlhd (cons V4393 ())) (cons (cons shen.hdtl (cons V4393 ())) ()))) (cons (shen.syntax (tl V4392) NewStr V4394) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ()))))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V4398 V4399 V4400) (cond ((cons? V4398) (let Test (cons cons? (cons (cons hd (cons V4399 ())) ())) (let Action (shen.syntax (tl V4398) (cons shen.pair (cons (cons shen.tlhd (cons V4399 ())) (cons (cons shen.hdtl (cons V4399 ())) ()))) V4400) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V4402) (cond ((= () V4402) ()) ((shen.grammar_symbol? V4402) (cons shen.hdtl (cons (concat Parse_ V4402) ()))) ((variable? V4402) (concat Parse_ V4402)) ((cons? V4402) (map (lambda Z (shen.semantics Z)) V4402)) (true V4402)))

(defun shen.pair (V4405 V4406) (cons V4405 (cons V4406 ())))

(defun shen.hdtl (V4408) (hd (tl V4408)))

(defun shen.hdhd (V4410) (hd (hd V4410)))

(defun shen.tlhd (V4412) (tl (hd V4412)))

(defun shen.snd-or-fail (V4420) (cond ((and (cons? V4420) (and (cons? (tl V4420)) (= () (tl (tl V4420))))) (hd (tl V4420))) (true (fail))))

(defun fail () shen.fail!)(defun <!> (V4428) (cond ((and (cons? V4428) (and (cons? (tl V4428)) (= () (tl (tl V4428))))) (cons () (cons (hd V4428) ()))) (true (fail))))

(defun <e> (V4434) (cond ((and (cons? V4434) (and (cons? (tl V4434)) (= () (tl (tl V4434))))) (cons (hd V4434) (cons () ()))) (true (shen.f_error <e>))))



