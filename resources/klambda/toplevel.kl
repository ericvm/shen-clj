"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (shen.toplevel-display-exception E))) (shen.loop)))))

(defun shen.toplevel-display-exception (V3935) (pr (error-to-string V3935) (stoutput)))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V3937) (cond ((= () V3937) ()) ((and (cons? V3937) (cons? (tl V3937))) (do (set (hd V3937) (hd (tl V3937))) (shen.multiple-set (tl (tl V3937))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V3939) (declare V3939 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V3951 V3952) (cond ((and (tuple? V3951) (and (cons? (snd V3951)) (element? (hd (snd V3951)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V3951) (tl (snd V3951))) V3952)) ((and (tuple? V3951) (and (cons? (snd V3951)) (and (cons? (tl (snd V3951))) (and (= () (tl (tl (snd V3951)))) (and (cons? V3952) (and (= (hd (snd V3951)) (shen.exclamation)) (= (hd (tl (snd V3951))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V3952))) (hd V3952))) ((and (tuple? V3951) (and (cons? (snd V3951)) (= (hd (snd V3951)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V3951)) V3952) (let Find (head (shen.find-past-inputs Key? V3952)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V3951) (and (cons? (snd V3951)) (and (= () (tl (snd V3951))) (= (hd (snd V3951)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V3952) 0) (abort))) ((and (tuple? V3951) (and (cons? (snd V3951)) (= (hd (snd V3951)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V3951)) V3952) (let Pastprint (shen.print-past-inputs Key? (reverse V3952) 0) (abort)))) (true V3951)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V3954) (do (shen.for-each (lambda Byte (pr (n->string Byte) (stoutput))) V3954) (nl 1)))

(defun shen.update_history (V3957 V3958) (set shen.*history* (cons V3957 V3958)))

(defun shen.toplineread () (shen.toplineread_loop (shen.read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V3962 V3963) (cond ((= V3962 (shen.hat)) (simple-error "line read aborted")) ((element? V3962 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V3963 (lambda E shen.nextline)) (let It (shen.record-it V3963) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (shen.read-char-code (stinput)) (append V3963 (cons V3962 ()))) (@p Line V3963))))) (true (shen.toplineread_loop (shen.read-char-code (stinput)) (if (= V3962 -1) V3963 (append V3963 (cons V3962 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V3969) (cond ((= + V3969) (set shen.*tc* true)) ((= - V3969) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V3971) (shen.toplevel_evaluate V3971 (value shen.*tc*)))

(defun shen.find-past-inputs (V3974 V3975) (let F (shen.find V3974 V3975) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V3978 V3979) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V3978 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V3979)))) (lambda X (shen.prefix? V3978 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V3981) (cond ((and (cons? V3981) (= (hd V3981) (shen.space))) (shen.trim-gubbins (tl V3981))) ((and (cons? V3981) (= (hd V3981) (shen.newline))) (shen.trim-gubbins (tl V3981))) ((and (cons? V3981) (= (hd V3981) (shen.carriage-return))) (shen.trim-gubbins (tl V3981))) ((and (cons? V3981) (= (hd V3981) (shen.tab))) (shen.trim-gubbins (tl V3981))) ((and (cons? V3981) (= (hd V3981) (shen.left-round))) (shen.trim-gubbins (tl V3981))) (true V3981)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V3990 V3991) (cond ((= () V3991) ()) ((and (cons? V3991) (V3990 (hd V3991))) (cons (hd V3991) (shen.find V3990 (tl V3991)))) ((cons? V3991) (shen.find V3990 (tl V3991))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V4005 V4006) (cond ((= () V4005) true) ((and (cons? V4005) (and (cons? V4006) (= (hd V4006) (hd V4005)))) (shen.prefix? (tl V4005) (tl V4006))) (true false)))

(defun shen.print-past-inputs (V4018 V4019 V4020) (cond ((= () V4019) _) ((and (cons? V4019) (not (V4018 (hd V4019)))) (shen.print-past-inputs V4018 (tl V4019) (+ V4020 1))) ((and (cons? V4019) (tuple? (hd V4019))) (do (shen.prhush (shen.app V4020 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V4019))) (shen.print-past-inputs V4018 (tl V4019) (+ V4020 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V4023 V4024) (cond ((and (cons? V4023) (and (cons? (tl V4023)) (and (= : (hd (tl V4023))) (and (cons? (tl (tl V4023))) (and (= () (tl (tl (tl V4023)))) (= true V4024)))))) (shen.typecheck-and-evaluate (hd V4023) (hd (tl (tl V4023))))) ((and (cons? V4023) (cons? (tl V4023))) (do (shen.toplevel_evaluate (cons (hd V4023) ()) V4024) (do (nl 1) (shen.toplevel_evaluate (tl V4023) V4024)))) ((and (cons? V4023) (and (= () (tl V4023)) (= true V4024))) (shen.typecheck-and-evaluate (hd V4023) (gensym A))) ((and (cons? V4023) (and (= () (tl V4023)) (= false V4024))) (let Eval (shen.eval-without-macros (hd V4023)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V4027 V4028) (let Typecheck (shen.typecheck V4027 V4028) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V4027) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V4030) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V4030) V4030))

(defun shen.extract-pvars (V4036) (cond ((shen.pvar? V4036) (cons V4036 ())) ((cons? V4036) (union (shen.extract-pvars (hd V4036)) (shen.extract-pvars (tl V4036)))) (true ())))

(defun shen.mult_subst (V4044 V4045 V4046) (cond ((= () V4044) V4046) ((= () V4045) V4046) ((and (cons? V4044) (cons? V4045)) (shen.mult_subst (tl V4044) (tl V4045) (subst (hd V4044) (hd V4045) V4046))) (true (shen.f_error shen.mult_subst))))



