"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.read-char-code (V2358) (read-byte V2358))

(defun read-file-as-bytelist (V2360) (shen.read-file-as-Xlist V2360 (lambda S (read-byte S))))

(defun shen.read-file-as-charlist (V2362) (shen.read-file-as-Xlist V2362 (lambda S (shen.read-char-code S))))

(defun shen.read-file-as-Xlist (V2365 V2366) (let Stream (open V2365 in) (let X (V2366 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V2366 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V2371 V2372 V2373 V2374) (cond ((= -1 V2373) V2374) (true (shen.read-file-as-Xlist-help V2371 V2372 (V2372 V2371) (cons V2373 V2374)))))

(defun read-file-as-string (V2376) (let Stream (open V2376 in) (shen.rfas-h Stream (shen.read-char-code Stream) "")))

(defun shen.rfas-h (V2380 V2381 V2382) (cond ((= -1 V2381) (do (close V2380) V2382)) (true (shen.rfas-h V2380 (shen.read-char-code V2380) (cn V2382 (n->string V2381))))))

(defun input (V2384) (eval-kl (read V2384)))

(defun input+ (V2387 V2388) (let Mono? (shen.monotype V2387) (let Input (read V2388) (if (= false (shen.typecheck Input (shen.demodulate V2387))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V2387 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V2390) (cond ((cons? V2390) (map (lambda Z (shen.monotype Z)) V2390)) (true (if (variable? V2390) (simple-error (cn "input+ expects a monotype: not " (shen.app V2390 "
" shen.a))) V2390))))

(defun read (V2392) (hd (shen.read-loop V2392 (shen.read-char-code V2392) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V2400 V2401 V2402) (cond ((= 94 V2401) (simple-error "read aborted")) ((= -1 V2401) (if (empty? V2402) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V2402 (lambda E E)))) ((shen.terminator? V2401) (let AllChars (append V2402 (cons V2401 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V2400 (shen.read-char-code V2400) AllChars) Read))))) (true (shen.read-loop V2400 (shen.read-char-code V2400) (append V2402 (cons V2401 ()))))))

(defun shen.terminator? (V2404) (element? V2404 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V2406) (shen.lineread-loop (shen.read-char-code V2406) () V2406))

(defun shen.lineread-loop (V2411 V2412 V2413) (cond ((= -1 V2411) (if (empty? V2412) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V2412 (lambda E E)))) ((= V2411 (shen.hat)) (simple-error "line read aborted")) ((element? V2411 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2412 (lambda E shen.nextline)) (let It (shen.record-it V2412) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (shen.read-char-code V2413) (append V2412 (cons V2411 ())) V2413) Line)))) (true (shen.lineread-loop (shen.read-char-code V2413) (append V2412 (cons V2411 ())) V2413))))

(defun shen.record-it (V2415) (let TrimLeft (shen.trim-whitespace V2415) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V2417) (cond ((and (cons? V2417) (element? (hd V2417) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V2417))) (true V2417)))

(defun shen.record-it-h (V2419) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V2419))) V2419))

(defun shen.cn-all (V2421) (cond ((= () V2421) "") ((cons? V2421) (cn (hd V2421) (shen.cn-all (tl V2421)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V2423) (let Charlist (shen.read-file-as-charlist V2423) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V2425) (let Ns (map (lambda X (string->n X)) (explode V2425)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V2433) (cond ((and (cons? V2433) (and (cons? (hd V2433)) (and (cons? (tl V2433)) (= () (tl (tl V2433)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V2433)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V2440 V2441) (cond ((= () V2441) "") ((= 0 V2440) "") ((cons? V2441) (cn (n->string (hd V2441)) (shen.compress-50 (- V2440 1) (tl V2441)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V2443) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V2443) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V2443) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V2443) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V2443) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V2443) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V2443) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2443) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2443) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V2443) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V2443) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2443) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V2443) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V2443) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2443) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V2445) (if (and (cons? (hd V2445)) (= 91 (hd (hd V2445)))) (shen.pair (hd (shen.pair (tl (hd V2445)) (shen.hdtl V2445))) shen.skip) (fail)))

(defun shen.<rsb> (V2447) (if (and (cons? (hd V2447)) (= 93 (hd (hd V2447)))) (shen.pair (hd (shen.pair (tl (hd V2447)) (shen.hdtl V2447))) shen.skip) (fail)))

(defun shen.<lcurly> (V2449) (if (and (cons? (hd V2449)) (= 123 (hd (hd V2449)))) (shen.pair (hd (shen.pair (tl (hd V2449)) (shen.hdtl V2449))) shen.skip) (fail)))

(defun shen.<rcurly> (V2451) (if (and (cons? (hd V2451)) (= 125 (hd (hd V2451)))) (shen.pair (hd (shen.pair (tl (hd V2451)) (shen.hdtl V2451))) shen.skip) (fail)))

(defun shen.<bar> (V2453) (if (and (cons? (hd V2453)) (= 124 (hd (hd V2453)))) (shen.pair (hd (shen.pair (tl (hd V2453)) (shen.hdtl V2453))) shen.skip) (fail)))

(defun shen.<semicolon> (V2455) (if (and (cons? (hd V2455)) (= 59 (hd (hd V2455)))) (shen.pair (hd (shen.pair (tl (hd V2455)) (shen.hdtl V2455))) shen.skip) (fail)))

(defun shen.<colon> (V2457) (if (and (cons? (hd V2457)) (= 58 (hd (hd V2457)))) (shen.pair (hd (shen.pair (tl (hd V2457)) (shen.hdtl V2457))) shen.skip) (fail)))

(defun shen.<comma> (V2459) (if (and (cons? (hd V2459)) (= 44 (hd (hd V2459)))) (shen.pair (hd (shen.pair (tl (hd V2459)) (shen.hdtl V2459))) shen.skip) (fail)))

(defun shen.<equal> (V2461) (if (and (cons? (hd V2461)) (= 61 (hd (hd V2461)))) (shen.pair (hd (shen.pair (tl (hd V2461)) (shen.hdtl V2461))) shen.skip) (fail)))

(defun shen.<minus> (V2463) (if (and (cons? (hd V2463)) (= 45 (hd (hd V2463)))) (shen.pair (hd (shen.pair (tl (hd V2463)) (shen.hdtl V2463))) shen.skip) (fail)))

(defun shen.<lrb> (V2465) (if (and (cons? (hd V2465)) (= 40 (hd (hd V2465)))) (shen.pair (hd (shen.pair (tl (hd V2465)) (shen.hdtl V2465))) shen.skip) (fail)))

(defun shen.<rrb> (V2467) (if (and (cons? (hd V2467)) (= 41 (hd (hd V2467)))) (shen.pair (hd (shen.pair (tl (hd V2467)) (shen.hdtl V2467))) shen.skip) (fail)))

(defun shen.<atom> (V2469) (let YaccParse (let Parse_shen.<str> (shen.<str> V2469) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V2469) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V2469) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V2471) (cond ((= () V2471) "") ((and (cons? V2471) (and (= "c" (hd V2471)) (and (cons? (tl V2471)) (= "#" (hd (tl V2471)))))) (let CodePoint (shen.code-point (tl (tl V2471))) (let AfterCodePoint (shen.after-codepoint (tl (tl V2471))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V2471) (@s (hd V2471) (shen.control-chars (tl V2471)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V2475) (cond ((and (cons? V2475) (= ";" (hd V2475))) "") ((and (cons? V2475) (element? (hd V2475) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V2475) (shen.code-point (tl V2475)))) (true (simple-error (cn "code point parse error " (shen.app V2475 "
" shen.a))))))

(defun shen.after-codepoint (V2481) (cond ((= () V2481) ()) ((and (cons? V2481) (= ";" (hd V2481))) (tl V2481)) ((cons? V2481) (shen.after-codepoint (tl V2481))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V2483) (shen.pre (reverse (shen.digits->integers V2483)) 0))

(defun shen.digits->integers (V2489) (cond ((and (cons? V2489) (= "0" (hd V2489))) (cons 0 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "1" (hd V2489))) (cons 1 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "2" (hd V2489))) (cons 2 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "3" (hd V2489))) (cons 3 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "4" (hd V2489))) (cons 4 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "5" (hd V2489))) (cons 5 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "6" (hd V2489))) (cons 6 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "7" (hd V2489))) (cons 7 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "8" (hd V2489))) (cons 8 (shen.digits->integers (tl V2489)))) ((and (cons? V2489) (= "9" (hd V2489))) (cons 9 (shen.digits->integers (tl V2489)))) (true ())))

(defun shen.<sym> (V2491) (let Parse_shen.<alpha> (shen.<alpha> V2491) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V2493) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V2493) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2493) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V2495) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V2495) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V2495) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V2497) (if (cons? (hd V2497)) (let Parse_Char (hd (hd V2497)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2497)) (shen.hdtl V2497))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V2503) (cond ((= 48 V2503) true) ((= 49 V2503) true) ((= 50 V2503) true) ((= 51 V2503) true) ((= 52 V2503) true) ((= 53 V2503) true) ((= 54 V2503) true) ((= 55 V2503) true) ((= 56 V2503) true) ((= 57 V2503) true) (true false)))

(defun shen.<alpha> (V2505) (if (cons? (hd V2505)) (let Parse_Char (hd (hd V2505)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V2505)) (shen.hdtl V2505))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V2507) (or (= V2507 126) (or (and (> V2507 94) (< V2507 123)) (or (and (> V2507 59) (< V2507 91)) (or (and (> V2507 41) (and (< V2507 58) (not (= V2507 44)))) (or (and (> V2507 34) (< V2507 40)) (= V2507 33)))))))

(defun shen.<str> (V2509) (let Parse_shen.<dbq> (shen.<dbq> V2509) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V2511) (if (cons? (hd V2511)) (let Parse_Char (hd (hd V2511)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V2511)) (shen.hdtl V2511))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V2513) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V2513) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2513) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V2515) (if (cons? (hd V2515)) (let Parse_Char (hd (hd V2515)) (shen.pair (hd (shen.pair (tl (hd V2515)) (shen.hdtl V2515))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V2517) (if (cons? (hd V2517)) (let Parse_Char (hd (hd V2517)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V2517)) (shen.hdtl V2517))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V2519) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2519) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V2519) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2519) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2519) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V2519) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2519) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V2521) (if (and (cons? (hd V2521)) (= 101 (hd (hd V2521)))) (shen.pair (hd (shen.pair (tl (hd V2521)) (shen.hdtl V2521))) shen.skip) (fail)))

(defun shen.<log10> (V2523) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V2523) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V2523) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V2525) (if (cons? (hd V2525)) (let Parse_Char (hd (hd V2525)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V2525)) (shen.hdtl V2525))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V2527) (if (cons? (hd V2527)) (let Parse_Char (hd (hd V2527)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V2527)) (shen.hdtl V2527))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V2529) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V2529) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2529) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V2531) (let Parse_shen.<digits> (shen.<digits> V2531) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V2533) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V2533) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V2533) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V2535) (if (cons? (hd V2535)) (let Parse_X (hd (hd V2535)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V2535)) (shen.hdtl V2535))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V2537) (cond ((= 48 V2537) 0) ((= 49 V2537) 1) ((= 50 V2537) 2) ((= 51 V2537) 3) ((= 52 V2537) 4) ((= 53 V2537) 5) ((= 54 V2537) 6) ((= 55 V2537) 7) ((= 56 V2537) 8) ((= 57 V2537) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V2542 V2543) (cond ((= () V2542) 0) ((cons? V2542) (+ (* (shen.expt 10 V2543) (hd V2542)) (shen.pre (tl V2542) (+ V2543 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V2548 V2549) (cond ((= () V2548) 0) ((cons? V2548) (+ (* (shen.expt 10 (- 0 V2549)) (hd V2548)) (shen.post (tl V2548) (+ V2549 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V2554 V2555) (cond ((= 0 V2555) 1) ((> V2555 0) (* V2554 (shen.expt V2554 (- V2555 1)))) (true (* 1 (/ (shen.expt V2554 (+ V2555 1)) V2554)))))

(defun shen.<st_input1> (V2557) (let Parse_shen.<st_input> (shen.<st_input> V2557) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V2559) (let Parse_shen.<st_input> (shen.<st_input> V2559) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V2561) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V2561) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V2561) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V2563) (let Parse_shen.<backslash> (shen.<backslash> V2563) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V2565) (if (and (cons? (hd V2565)) (= 92 (hd (hd V2565)))) (shen.pair (hd (shen.pair (tl (hd V2565)) (shen.hdtl V2565))) shen.skip) (fail)))

(defun shen.<anysingle> (V2567) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V2567) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V2567) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V2569) (if (cons? (hd V2569)) (let Parse_X (hd (hd V2569)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V2569)) (shen.hdtl V2569))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V2571) (if (cons? (hd V2571)) (let Parse_X (hd (hd V2571)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V2571)) (shen.hdtl V2571))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V2573) (let Parse_shen.<backslash> (shen.<backslash> V2573) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V2575) (if (and (cons? (hd V2575)) (= 42 (hd (hd V2575)))) (shen.pair (hd (shen.pair (tl (hd V2575)) (shen.hdtl V2575))) shen.skip) (fail)))

(defun shen.<anymulti> (V2577) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V2577) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V2577) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V2577)) (let Parse_X (hd (hd V2577)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V2577)) (shen.hdtl V2577))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V2579) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V2579) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V2579) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V2581) (if (cons? (hd V2581)) (let Parse_X (hd (hd V2581)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V2581)) (shen.hdtl V2581))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V2583) (cond ((= () V2583) ()) ((and (cons? V2583) (and (cons? (tl V2583)) (and (cons? (tl (tl V2583))) (and (= () (tl (tl (tl V2583)))) (= (hd (tl V2583)) bar!))))) (cons cons (cons (hd V2583) (tl (tl V2583))))) ((cons? V2583) (cons cons (cons (hd V2583) (cons (shen.cons_form (tl V2583)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V2588 V2589) (cond ((and (cons? V2588) (and (= $ (hd V2588)) (and (cons? (tl V2588)) (= () (tl (tl V2588)))))) (append (explode (hd (tl V2588))) V2589)) ((and (cons? V2588) (and (= package (hd V2588)) (and (cons? (tl V2588)) (and (= null (hd (tl V2588))) (cons? (tl (tl V2588))))))) (append (tl (tl (tl V2588))) V2589)) ((and (cons? V2588) (and (= package (hd V2588)) (and (cons? (tl V2588)) (cons? (tl (tl V2588)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V2588)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V2588))) (let PackageNameDot (intern (cn (str (hd (tl V2588))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V2588))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V2588)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V2589)))))))) (true (cons V2588 V2589))))

(defun shen.record-exceptions (V2592 V2593) (let CurrExceptions (trap-error (get V2593 shen.external-symbols (value *property-vector*)) (lambda E ())) (let AllExceptions (union V2592 CurrExceptions) (put V2593 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V2596 V2597) (put V2596 shen.internal-symbols (union V2597 (trap-error (get V2596 shen.internal-symbols (value *property-vector*)) (lambda E ()))) (value *property-vector*)))

(defun shen.internal-symbols (V2608 V2609) (cond ((and (symbol? V2609) (shen.prefix? V2608 (explode V2609))) (cons V2609 ())) ((cons? V2609) (union (shen.internal-symbols V2608 (hd V2609)) (shen.internal-symbols V2608 (tl V2609)))) (true ())))

(defun shen.packageh (V2626 V2627 V2628 V2629) (cond ((cons? V2628) (cons (shen.packageh V2626 V2627 (hd V2628) V2629) (shen.packageh V2626 V2627 (tl V2628) V2629))) ((or (shen.sysfunc? V2628) (or (variable? V2628) (or (element? V2628 V2627) (or (shen.doubleunderline? V2628) (shen.singleunderline? V2628))))) V2628) ((and (symbol? V2628) (let ExplodeX (explode V2628) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V2629 ExplodeX))))) (concat V2626 V2628)) (true V2628)))



