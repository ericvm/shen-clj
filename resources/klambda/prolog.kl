"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V1809) (let Parse_shen.<predicate*> (shen.<predicate*> V1809) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V1818 V1819) (cond ((and (cons? V1819) (and (cons? (tl V1819)) (= () (tl (tl V1819))))) (simple-error (cn "prolog syntax error in " (shen.app V1818 (cn " here:

 " (shen.app (shen.next-50 50 (hd V1819)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V1818 "
" shen.a))))))

(defun shen.next-50 (V1826 V1827) (cond ((= () V1827) "") ((= 0 V1826) "") ((cons? V1827) (cn (shen.decons-string (hd V1827)) (shen.next-50 (- V1826 1) (tl V1827)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V1829) (cond ((and (cons? V1829) (and (= cons (hd V1829)) (and (cons? (tl V1829)) (and (cons? (tl (tl V1829))) (= () (tl (tl (tl V1829)))))))) (shen.app (shen.eval-cons V1829) " " shen.s)) (true (shen.app V1829 " " shen.r))))

(defun shen.insert-predicate (V1832 V1833) (cond ((and (cons? V1833) (and (cons? (tl V1833)) (= () (tl (tl V1833))))) (cons (cons V1832 (hd V1833)) (cons :- (tl V1833)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V1835) (if (cons? (hd V1835)) (let Parse_X (hd (hd V1835)) (shen.pair (hd (shen.pair (tl (hd V1835)) (shen.hdtl V1835))) Parse_X)) (fail)))

(defun shen.<clauses*> (V1837) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V1837) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1837) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V1839) (let Parse_shen.<head*> (shen.<head*> V1839) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V1841) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V1841) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1841) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V1843) (if (cons? (hd V1843)) (let Parse_X (hd (hd V1843)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V1843)) (shen.hdtl V1843))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V1849) (cond ((and (cons? V1849) (and (= cons (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (= () (tl (tl (tl V1849)))))))) (and (shen.legitimate-term? (hd (tl V1849))) (shen.legitimate-term? (hd (tl (tl V1849)))))) ((and (cons? V1849) (and (= mode (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (and (= + (hd (tl (tl V1849)))) (= () (tl (tl (tl V1849))))))))) (shen.legitimate-term? (hd (tl V1849)))) ((and (cons? V1849) (and (= mode (hd V1849)) (and (cons? (tl V1849)) (and (cons? (tl (tl V1849))) (and (= - (hd (tl (tl V1849)))) (= () (tl (tl (tl V1849))))))))) (shen.legitimate-term? (hd (tl V1849)))) ((cons? V1849) false) (true true)))

(defun shen.eval-cons (V1851) (cond ((and (cons? V1851) (and (= cons (hd V1851)) (and (cons? (tl V1851)) (and (cons? (tl (tl V1851))) (= () (tl (tl (tl V1851)))))))) (cons (shen.eval-cons (hd (tl V1851))) (shen.eval-cons (hd (tl (tl V1851)))))) ((and (cons? V1851) (and (= mode (hd V1851)) (and (cons? (tl V1851)) (and (cons? (tl (tl V1851))) (= () (tl (tl (tl V1851)))))))) (cons mode (cons (shen.eval-cons (hd (tl V1851))) (tl (tl V1851))))) (true V1851)))

(defun shen.<body*> (V1853) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V1853) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1853) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V1855) (let YaccParse (if (and (cons? (hd V1855)) (= ! (hd (hd V1855)))) (shen.pair (hd (shen.pair (tl (hd V1855)) (shen.hdtl V1855))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V1855)) (let Parse_X (hd (hd V1855)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1855)) (shen.hdtl V1855))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V1857) (if (cons? (hd V1857)) (let Parse_X (hd (hd V1857)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1857)) (shen.hdtl V1857))) Parse_X) (fail))) (fail)))

(defun cut (V1861 V1862 V1863) (let Result (thaw V1863) (if (= Result false) V1861 Result)))

(defun shen.insert_modes (V1865) (cond ((and (cons? V1865) (and (= mode (hd V1865)) (and (cons? (tl V1865)) (and (cons? (tl (tl V1865))) (= () (tl (tl (tl V1865)))))))) V1865) ((= () V1865) ()) ((cons? V1865) (cons (cons mode (cons (hd V1865) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V1865)) (cons - ()))))) (true V1865)))

(defun shen.s-prolog (V1867) (map (lambda X (eval X)) (shen.prolog->shen V1867)))

(defun shen.prolog->shen (V1869) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V1869)))))

(defun shen.s-prolog_clause (V1871) (cond ((and (cons? V1871) (and (cons? (tl V1871)) (and (= :- (hd (tl V1871))) (and (cons? (tl (tl V1871))) (= () (tl (tl (tl V1871)))))))) (cons (hd V1871) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V1871)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V1873) (cond ((and (cons? V1873) (and (cons? (tl V1873)) (and (= :- (hd (tl V1873))) (and (cons? (tl (tl V1873))) (and (= () (tl (tl (tl V1873)))) (trap-error (< (shen.complexity_head (hd V1873)) (value shen.*maxcomplexity*)) (lambda _ false))))))) (cons V1873 ())) ((and (cons? V1873) (and (cons? (hd V1873)) (and (cons? (tl V1873)) (and (= :- (hd (tl V1873))) (and (cons? (tl (tl V1873))) (= () (tl (tl (tl V1873))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V1873))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V1873)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V1873)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V1873)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V1879) (cond ((cons? V1879) (shen.safe-product (map (lambda X (shen.complexity X)) (tl V1879)))) (true (shen.f_error shen.complexity_head))))

(defun shen.safe-multiply (V1882 V1883) (* V1882 V1883))

(defun shen.complexity (V1892) (cond ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (hd (tl V1892))) (and (= mode (hd (hd (tl V1892)))) (and (cons? (tl (hd (tl V1892)))) (and (cons? (tl (tl (hd (tl V1892))))) (and (= () (tl (tl (tl (hd (tl V1892)))))) (and (cons? (tl (tl V1892))) (= () (tl (tl (tl V1892))))))))))))) (shen.complexity (hd (tl V1892)))) ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (hd (tl V1892))) (and (cons? (tl (tl V1892))) (and (= + (hd (tl (tl V1892)))) (= () (tl (tl (tl V1892)))))))))) (shen.safe-multiply 2 (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1892))) (tl (tl V1892))))) (shen.complexity (cons mode (cons (tl (hd (tl V1892))) (tl (tl V1892)))))))) ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (hd (tl V1892))) (and (cons? (tl (tl V1892))) (and (= - (hd (tl (tl V1892)))) (= () (tl (tl (tl V1892)))))))))) (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V1892))) (tl (tl V1892))))) (shen.complexity (cons mode (cons (tl (hd (tl V1892))) (tl (tl V1892))))))) ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (tl (tl V1892))) (and (= () (tl (tl (tl V1892)))) (variable? (hd (tl V1892)))))))) 1) ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (tl (tl V1892))) (and (= + (hd (tl (tl V1892)))) (= () (tl (tl (tl V1892))))))))) 2) ((and (cons? V1892) (and (= mode (hd V1892)) (and (cons? (tl V1892)) (and (cons? (tl (tl V1892))) (and (= - (hd (tl (tl V1892)))) (= () (tl (tl (tl V1892))))))))) 1) (true (shen.complexity (cons mode (cons V1892 (cons + ())))))))

(defun shen.safe-product (V1894) (cond ((= () V1894) 1) ((cons? V1894) (shen.safe-multiply (hd V1894) (shen.safe-product (tl V1894)))) (true (shen.f_error shen.safe-product))))

(defun shen.s-prolog_literal (V1896) (cond ((and (cons? V1896) (and (= is (hd V1896)) (and (cons? (tl V1896)) (and (cons? (tl (tl V1896))) (= () (tl (tl (tl V1896)))))))) (cons bind (cons (hd (tl V1896)) (cons (shen.insert_deref (hd (tl (tl V1896)))) ())))) ((and (cons? V1896) (and (= when (hd V1896)) (and (cons? (tl V1896)) (= () (tl (tl V1896)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V1896))) ()))) ((and (cons? V1896) (and (= bind (hd V1896)) (and (cons? (tl V1896)) (and (cons? (tl (tl V1896))) (= () (tl (tl (tl V1896)))))))) (cons bind (cons (hd (tl V1896)) (cons (shen.insert_lazyderef (hd (tl (tl V1896)))) ())))) ((and (cons? V1896) (and (= fwhen (hd V1896)) (and (cons? (tl V1896)) (= () (tl (tl V1896)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V1896))) ()))) ((cons? V1896) V1896) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V1898) (cond ((variable? V1898) (cons shen.deref (cons V1898 (cons ProcessN ())))) ((cons? V1898) (cons (shen.insert_deref (hd V1898)) (shen.insert_deref (tl V1898)))) (true V1898)))

(defun shen.insert_lazyderef (V1900) (cond ((variable? V1900) (cons shen.lazyderef (cons V1900 (cons ProcessN ())))) ((cons? V1900) (cons (shen.insert_lazyderef (hd V1900)) (shen.insert_lazyderef (tl V1900)))) (true V1900)))

(defun shen.group_clauses (V1902) (cond ((= () V1902) ()) ((cons? V1902) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V1902) X)) V1902) (let Rest (difference V1902 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V1907 V1908) (cond ((= () V1908) ()) ((cons? V1908) (if (V1907 (hd V1908)) (cons (hd V1908) (shen.collect V1907 (tl V1908))) (shen.collect V1907 (tl V1908)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V1927 V1928) (cond ((and (cons? V1927) (and (cons? (hd V1927)) (and (cons? V1928) (cons? (hd V1928))))) (= (hd (hd V1927)) (hd (hd V1928)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V1930) (let F (shen.procedure_name V1930) (let Shen (shen.clauses-to-shen F V1930) Shen)))

(defun shen.procedure_name (V1944) (cond ((and (cons? V1944) (and (cons? (hd V1944)) (cons? (hd (hd V1944))))) (hd (hd (hd V1944)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V1947 V1948) (let Linear (map (lambda X (shen.linearise-clause X)) V1948) (let Arity (shen.prolog-aritycheck V1947 (map (lambda X (head X)) V1948)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V1947 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V1950) (cond ((not (shen.occurs? cut V1950)) V1950) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V1950 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V1958 V1959) (cond ((= V1959 V1958) false) (true V1959)))

(defun shen.nest-disjunct (V1961) (cond ((and (cons? V1961) (= () (tl V1961))) (hd V1961)) ((cons? V1961) (shen.lisp-or (hd V1961) (shen.nest-disjunct (tl V1961)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V1964 V1965) (cons let (cons Case (cons V1964 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V1965 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V1970 V1971) (cond ((and (cons? V1971) (= () (tl V1971))) (- (length (hd V1971)) 1)) ((and (cons? V1971) (cons? (tl V1971))) (if (= (length (hd V1971)) (length (hd (tl V1971)))) (shen.prolog-aritycheck V1970 (tl V1971)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V1970 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V1973) (cond ((and (cons? V1973) (and (cons? (tl V1973)) (and (= :- (hd (tl V1973))) (and (cons? (tl (tl V1973))) (= () (tl (tl (tl V1973)))))))) (let Linear (shen.linearise (cons (hd V1973) (tl (tl V1973)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V1975) (cond ((and (cons? V1975) (and (cons? (tl V1975)) (= () (tl (tl V1975))))) (cons (shen.explicit_modes (hd V1975)) (cons :- (cons (shen.cf_help (hd (tl V1975))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V1977) (cond ((cons? V1977) (cons (hd V1977) (map (lambda X (shen.em_help X)) (tl V1977)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V1979) (cond ((and (cons? V1979) (and (= mode (hd V1979)) (and (cons? (tl V1979)) (and (cons? (tl (tl V1979))) (= () (tl (tl (tl V1979)))))))) V1979) (true (cons mode (cons V1979 (cons + ()))))))

(defun shen.cf_help (V1981) (cond ((and (cons? V1981) (and (= where (hd V1981)) (and (cons? (tl V1981)) (and (cons? (hd (tl V1981))) (and (= = (hd (hd (tl V1981)))) (and (cons? (tl (hd (tl V1981)))) (and (cons? (tl (tl (hd (tl V1981))))) (and (= () (tl (tl (tl (hd (tl V1981)))))) (and (cons? (tl (tl V1981))) (= () (tl (tl (tl V1981))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V1981)))) (shen.cf_help (hd (tl (tl V1981)))))) (true V1981)))

(defun occurs-check (V1987) (cond ((= + V1987) (set shen.*occurs* true)) ((= - V1987) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V1990 V1991) (cond ((and (cons? V1990) (and (cons? (hd V1990)) (and (cons? (tl V1990)) (and (= :- (hd (tl V1990))) (and (cons? (tl (tl V1990))) (= () (tl (tl (tl V1990))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V1990)) (cons (shen.continuation_call (tl (hd V1990)) (hd (tl (tl V1990)))) ()))) V1991) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V1994 V1995) (let VTerms (cons ProcessN (shen.extract_vars V1994)) (let VBody (shen.extract_vars V1995) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V1995)))))

(defun remove (V1998 V1999) (shen.remove-h V1998 V1999 ()))

(defun shen.remove-h (V2006 V2007 V2008) (cond ((= () V2007) (reverse V2008)) ((and (cons? V2007) (= (hd V2007) V2006)) (shen.remove-h (hd V2007) (tl V2007) V2008)) ((cons? V2007) (shen.remove-h V2006 (tl V2007) (cons (hd V2007) V2008))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V2011 V2012) (cond ((and (= () V2011) (= () V2012)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V2012) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V2011 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V2011) (cons call (cons shen.the (cons shen.continuation (cons V2012 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V2011 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V2012 ())))) ())))))))))))

(defun shen.make_mu_application (V2015 V2016) (cond ((and (cons? V2015) (and (= shen.mu (hd V2015)) (and (cons? (tl V2015)) (and (= () (hd (tl V2015))) (and (cons? (tl (tl V2015))) (and (= () (tl (tl (tl V2015)))) (= () V2016))))))) (hd (tl (tl V2015)))) ((and (cons? V2015) (and (= shen.mu (hd V2015)) (and (cons? (tl V2015)) (and (cons? (hd (tl V2015))) (and (cons? (tl (tl V2015))) (and (= () (tl (tl (tl V2015)))) (cons? V2016))))))) (cons (cons shen.mu (cons (hd (hd (tl V2015))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V2015))) (tl (tl V2015)))) (tl V2016)) ()))) (cons (hd V2016) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V2025 V2026) (cond ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (hd (tl (hd V2025)))) (and (= mode (hd (hd (tl (hd V2025))))) (and (cons? (tl (hd (tl (hd V2025))))) (and (cons? (tl (tl (hd (tl (hd V2025)))))) (and (= () (tl (tl (tl (hd (tl (hd V2025))))))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (= () (tl (tl V2025))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V2025))))) (tl (tl (hd V2025))))) (tl V2025)) (hd (tl (tl (hd (tl (hd V2025)))))))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (= _ (hd (tl (hd V2025)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V2025)))) V2026)) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (shen.ephemeral_variable? (hd (tl (hd V2025))) (hd (tl V2025))))))))))) (subst (hd (tl V2025)) (hd (tl (hd V2025))) (shen.mu_reduction (hd (tl (tl (hd V2025)))) V2026))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (variable? (hd (tl (hd V2025)))))))))))) (cons let (cons (hd (tl (hd V2025))) (cons shen.be (cons (hd (tl V2025)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2025)))) V2026) ()))))))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (and (= - V2026) (shen.prolog_constant? (hd (tl (hd V2025))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2025))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2025))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2025)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (and (= + V2026) (shen.prolog_constant? (hd (tl (hd V2025))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2025))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V2025))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V2025)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V2025))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2025)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (hd (tl (hd V2025)))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (= - V2026)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2025))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2025)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2025)))) (tl (tl (hd V2025))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V2025) (and (cons? (hd V2025)) (and (= shen.mu (hd (hd V2025))) (and (cons? (tl (hd V2025))) (and (cons? (hd (tl (hd V2025)))) (and (cons? (tl (tl (hd V2025)))) (and (= () (tl (tl (tl (hd V2025))))) (and (cons? (tl V2025)) (and (= () (tl (tl V2025))) (= + V2026)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V2025))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V2025)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V2025)))) (tl (tl (hd V2025))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V2025)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V2025))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V2025)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V2025)))

(defun shen.rcons_form (V2028) (cond ((cons? V2028) (cons cons (cons (shen.rcons_form (hd V2028)) (cons (shen.rcons_form (tl V2028)) ())))) (true V2028)))

(defun shen.remove_modes (V2030) (cond ((and (cons? V2030) (and (= mode (hd V2030)) (and (cons? (tl V2030)) (and (cons? (tl (tl V2030))) (and (= + (hd (tl (tl V2030)))) (= () (tl (tl (tl V2030))))))))) (shen.remove_modes (hd (tl V2030)))) ((and (cons? V2030) (and (= mode (hd V2030)) (and (cons? (tl V2030)) (and (cons? (tl (tl V2030))) (and (= - (hd (tl (tl V2030)))) (= () (tl (tl (tl V2030))))))))) (shen.remove_modes (hd (tl V2030)))) ((cons? V2030) (cons (shen.remove_modes (hd V2030)) (shen.remove_modes (tl V2030)))) (true V2030)))

(defun shen.ephemeral_variable? (V2033 V2034) (and (variable? V2033) (variable? V2034)))

(defun shen.prolog_constant? (V2044) (cond ((cons? V2044) false) (true true)))

(defun shen.aum_to_shen-fist-cond (V2040)
((and (cons? V2040) (and (= let (hd V2040)) (and (cons? (tl V2040)) (and (cons? (tl (tl V2040))) (and (= shen.be (hd (tl (tl V2040)))) (and (cons? (tl (tl (tl V2040)))) (and (cons? (tl (tl (tl (tl V2040))))) (and (= in (hd (tl (tl (tl (tl V2040)))))) (and (cons? (tl (tl (tl (tl (tl V2040)))))) (= () (tl (tl (tl (tl (tl (tl V2040)))))))))))))))) (cons let (cons (hd (tl V2040)) (cons (shen.aum_to_shen (hd (tl (tl (tl V2040))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2040))))))) ()))))))

(defun shen.aum_to_shen (V2046) (cond (shen.aum_to_shen-first-cond 2040) ((and (cons? V2046) (and (= shen.the (hd V2046)) (and (cons? (tl V2046)) (and (= shen.result (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.of (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= shen.dereferencing (hd (tl (tl (tl V2046))))) (and (cons? (tl (tl (tl (tl V2046))))) (= () (tl (tl (tl (tl (tl V2046))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V2046)))))) (cons ProcessN ())))) ((and (cons? V2046) (and (= if (hd V2046)) (and (cons? (tl V2046)) (and (cons? (tl (tl V2046))) (and (= shen.then (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (cons? (tl (tl (tl (tl V2046))))) (and (= shen.else (hd (tl (tl (tl (tl V2046)))))) (and (cons? (tl (tl (tl (tl (tl V2046)))))) (= () (tl (tl (tl (tl (tl (tl V2046)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V2046))) (cons (shen.aum_to_shen (hd (tl (tl (tl V2046))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2046))))))) ()))))) ((and (cons? V2046) (and (cons? (tl V2046)) (and (= is (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.a (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= shen.variable (hd (tl (tl (tl V2046))))) (= () (tl (tl (tl (tl V2046)))))))))))) (cons shen.pvar? (cons (hd V2046) ()))) ((and (cons? V2046) (and (cons? (tl V2046)) (and (= is (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.a (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= shen.non-empty (hd (tl (tl (tl V2046))))) (and (cons? (tl (tl (tl (tl V2046))))) (and (= list (hd (tl (tl (tl (tl V2046)))))) (= () (tl (tl (tl (tl (tl V2046))))))))))))))) (cons cons? (cons (hd V2046) ()))) ((and (cons? V2046) (and (= shen.rename (hd V2046)) (and (cons? (tl V2046)) (and (= shen.the (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.variables (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= in (hd (tl (tl (tl V2046))))) (and (cons? (tl (tl (tl (tl V2046))))) (and (= () (hd (tl (tl (tl (tl V2046)))))) (and (cons? (tl (tl (tl (tl (tl V2046)))))) (and (= and (hd (tl (tl (tl (tl (tl V2046))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2046))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2046)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2046)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2046)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V2046)))))))))) ((and (cons? V2046) (and (= shen.rename (hd V2046)) (and (cons? (tl V2046)) (and (= shen.the (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.variables (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= in (hd (tl (tl (tl V2046))))) (and (cons? (tl (tl (tl (tl V2046))))) (and (cons? (hd (tl (tl (tl (tl V2046)))))) (and (cons? (tl (tl (tl (tl (tl V2046)))))) (and (= and (hd (tl (tl (tl (tl (tl V2046))))))) (and (cons? (tl (tl (tl (tl (tl (tl V2046))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V2046)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V2046)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V2046)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V2046)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V2046)))))) (tl (tl (tl (tl (tl V2046))))))))))) ()))))) ((and (cons? V2046) (and (= bind (hd V2046)) (and (cons? (tl V2046)) (and (cons? (tl (tl V2046))) (and (= shen.to (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (cons? (tl (tl (tl (tl V2046))))) (and (= in (hd (tl (tl (tl (tl V2046)))))) (and (cons? (tl (tl (tl (tl (tl V2046)))))) (= () (tl (tl (tl (tl (tl (tl V2046)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V2046)) (cons (shen.chwild (hd (tl (tl (tl V2046))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V2046))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V2046)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V2046) (and (cons? (tl V2046)) (and (= is (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= identical (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (and (= shen.to (hd (tl (tl (tl V2046))))) (and (cons? (tl (tl (tl (tl V2046))))) (= () (tl (tl (tl (tl (tl V2046)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V2046))))) (cons (hd V2046) ())))) ((= shen.failed! V2046) false) ((and (cons? V2046) (and (= shen.the (hd V2046)) (and (cons? (tl V2046)) (and (= head (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.of (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (= () (tl (tl (tl (tl V2046)))))))))))) (cons hd (tl (tl (tl V2046))))) ((and (cons? V2046) (and (= shen.the (hd V2046)) (and (cons? (tl V2046)) (and (= tail (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.of (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (= () (tl (tl (tl (tl V2046)))))))))))) (cons tl (tl (tl (tl V2046))))) ((and (cons? V2046) (and (= shen.pop (hd V2046)) (and (cons? (tl V2046)) (and (= shen.the (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.stack (hd (tl (tl V2046)))) (= () (tl (tl (tl V2046)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V2046) (and (= call (hd V2046)) (and (cons? (tl V2046)) (and (= shen.the (hd (tl V2046))) (and (cons? (tl (tl V2046))) (and (= shen.continuation (hd (tl (tl V2046)))) (and (cons? (tl (tl (tl V2046)))) (= () (tl (tl (tl (tl V2046)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V2046))))) ProcessN Continuation) ())))) (true V2046)))

(defun shen.chwild (V2048) (cond ((= V2048 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V2048) (map (lambda Z (shen.chwild Z)) V2048)) (true V2048)))

(defun shen.newpv (V2050) (let Count+1 (+ (<-address (value shen.*varcounter*) V2050) 1) (let IncVar (address-> (value shen.*varcounter*) V2050 Count+1) (let Vector (<-address (value shen.*prologvectors*) V2050) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V2050 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V2053 V2054) (let Vector (<-address (value shen.*prologvectors*) V2053) (let BigVector (shen.resize-vector Vector (+ V2054 V2054) shen.-null-) (address-> (value shen.*prologvectors*) V2053 BigVector))))

(defun shen.resize-vector (V2058 V2059 V2060) (let BigVector (address-> (absvector (+ 1 V2059)) 0 V2059) (shen.copy-vector V2058 BigVector (limit V2058) V2059 V2060)))

(defun shen.copy-vector (V2066 V2067 V2068 V2069 V2070) (shen.copy-vector-stage-2 (+ 1 V2068) (+ V2069 1) V2070 (shen.copy-vector-stage-1 1 V2066 V2067 (+ 1 V2068))))

(defun shen.copy-vector-stage-1 (V2078 V2079 V2080 V2081) (cond ((= V2081 V2078) V2080) (true (shen.copy-vector-stage-1 (+ 1 V2078) V2079 (address-> V2080 V2078 (<-address V2079 V2078)) V2081))))

(defun shen.copy-vector-stage-2 (V2089 V2090 V2091 V2092) (cond ((= V2090 V2089) V2092) (true (shen.copy-vector-stage-2 (+ V2089 1) V2090 V2091 (address-> V2092 V2089 V2091)))))

(defun shen.mk-pvar (V2094) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V2094))

(defun shen.pvar? (V2096) (and (absvector? V2096) (= (trap-error (<-address V2096 0) (lambda E shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V2100 V2101 V2102) (let Vector (<-address (value shen.*prologvectors*) V2102) (address-> Vector (<-address V2100 1) V2101)))

(defun shen.unbindv (V2105 V2106) (let Vector (<-address (value shen.*prologvectors*) V2106) (address-> Vector (<-address V2105 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V2110 V2111 V2112) (cond ((and (cons? V2110) (and (cons? (hd V2110)) (= () (tl V2110)))) (cons (hd (hd V2110)) (append (tl (hd V2110)) (cons V2111 (cons V2112 ()))))) ((and (cons? V2110) (cons? (hd V2110))) (let NewContinuation (shen.newcontinuation (tl V2110) V2111 V2112) (cons (hd (hd V2110)) (append (tl (hd V2110)) (cons V2111 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V2116 V2117 V2118) (cond ((= () V2116) V2118) ((and (cons? V2116) (cons? (hd V2116))) (cons freeze (cons (cons (hd (hd V2116)) (append (tl (hd V2116)) (cons V2117 (cons (shen.newcontinuation (tl V2116) V2117 V2118) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V2126 V2127 V2128) (shen.deref V2126 V2127))

(defun shen.measure&return (V2136 V2137 V2138) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V2136 V2137)))

(defun unify (V2143 V2144 V2145 V2146) (shen.lzy= (shen.lazyderef V2143 V2145) (shen.lazyderef V2144 V2145) V2145 V2146))

(defun shen.lzy= (V2168 V2169 V2170 V2171) (cond ((= V2169 V2168) (thaw V2171)) ((shen.pvar? V2168) (bind V2168 V2169 V2170 V2171)) ((shen.pvar? V2169) (bind V2169 V2168 V2170 V2171)) ((and (cons? V2168) (cons? V2169)) (shen.lzy= (shen.lazyderef (hd V2168) V2170) (shen.lazyderef (hd V2169) V2170) V2170 (freeze (shen.lzy= (shen.lazyderef (tl V2168) V2170) (shen.lazyderef (tl V2169) V2170) V2170 V2171)))) (true false)))

(defun shen.deref (V2174 V2175) (cond ((cons? V2174) (cons (shen.deref (hd V2174) V2175) (shen.deref (tl V2174) V2175))) (true (if (shen.pvar? V2174) (let Value (shen.valvector V2174 V2175) (if (= Value shen.-null-) V2174 (shen.deref Value V2175))) V2174))))

(defun shen.lazyderef (V2178 V2179) (if (shen.pvar? V2178) (let Value (shen.valvector V2178 V2179) (if (= Value shen.-null-) V2178 (shen.lazyderef Value V2179))) V2178))

(defun shen.valvector (V2182 V2183) (<-address (<-address (value shen.*prologvectors*) V2183) (<-address V2182 1)))

(defun unify! (V2188 V2189 V2190 V2191) (shen.lzy=! (shen.lazyderef V2188 V2190) (shen.lazyderef V2189 V2190) V2190 V2191))

(defun shen.lzy=! (V2213 V2214 V2215 V2216) (cond ((= V2214 V2213) (thaw V2216)) ((and (shen.pvar? V2213) (not (shen.occurs? V2213 (shen.deref V2214 V2215)))) (bind V2213 V2214 V2215 V2216)) ((and (shen.pvar? V2214) (not (shen.occurs? V2214 (shen.deref V2213 V2215)))) (bind V2214 V2213 V2215 V2216)) ((and (cons? V2213) (cons? V2214)) (shen.lzy=! (shen.lazyderef (hd V2213) V2215) (shen.lazyderef (hd V2214) V2215) V2215 (freeze (shen.lzy=! (shen.lazyderef (tl V2213) V2215) (shen.lazyderef (tl V2214) V2215) V2215 V2216)))) (true false)))

(defun shen.occurs? (V2228 V2229) (cond ((= V2229 V2228) true) ((cons? V2229) (or (shen.occurs? V2228 (hd V2229)) (shen.occurs? V2228 (tl V2229)))) (true false)))

(defun identical (V2234 V2235 V2236 V2237) (shen.lzy== (shen.lazyderef V2234 V2236) (shen.lazyderef V2235 V2236) V2236 V2237))

(defun shen.lzy== (V2259 V2260 V2261 V2262) (cond ((= V2260 V2259) (thaw V2262)) ((and (cons? V2259) (cons? V2260)) (shen.lzy== (shen.lazyderef (hd V2259) V2261) (shen.lazyderef (hd V2260) V2261) V2261 (freeze (shen.lzy== (tl V2259) (tl V2260) V2261 V2262)))) (true false)))

(defun shen.pvar (V2264) (cn "Var" (shen.app (<-address V2264 1) "" shen.a)))

(defun bind (V2269 V2270 V2271 V2272) (do (shen.bindv V2269 V2270 V2271) (let Result (thaw V2272) (do (shen.unbindv V2269 V2271) Result))))

(defun fwhen (V2290 V2291 V2292) (cond ((= true V2290) (thaw V2292)) ((= false V2290) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V2290 "%" shen.s))))))

(defun call (V2308 V2309 V2310) (cond ((cons? V2308) (shen.call-help (function (shen.lazyderef (hd V2308) V2309)) (tl V2308) V2309 V2310)) (true false)))

(defun shen.call-help (V2315 V2316 V2317 V2318) (cond ((= () V2316) (V2315 V2317 V2318)) ((cons? V2316) (shen.call-help (V2315 (hd V2316)) (tl V2316) V2317 V2318)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V2320) (cond ((and (cons? V2320) (cons? (hd V2320))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V2320)) (shen.insert-prolog-variables (cons (tl (hd V2320)) (cons (tl V2320) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V2324 V2325 V2326) (cond ((and (cons? V2325) (and (cons? (tl V2325)) (= () (tl (tl V2325))))) (shen.intprolog-help-help V2324 (hd V2325) (hd (tl V2325)) V2326)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V2331 V2332 V2333 V2334) (cond ((= () V2332) (V2331 V2334 (freeze (shen.call-rest V2333 V2334)))) ((cons? V2332) (shen.intprolog-help-help (V2331 (hd V2332)) (tl V2332) V2333 V2334)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V2339 V2340) (cond ((= () V2339) true) ((and (cons? V2339) (and (cons? (hd V2339)) (cons? (tl (hd V2339))))) (shen.call-rest (cons (cons ((hd (hd V2339)) (hd (tl (hd V2339)))) (tl (tl (hd V2339)))) (tl V2339)) V2340)) ((and (cons? V2339) (and (cons? (hd V2339)) (= () (tl (hd V2339))))) ((hd (hd V2339)) V2340 (freeze (shen.call-rest (tl V2339) V2340)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V2343 V2344) (shen.insert-prolog-variables-help V2343 (shen.flatten V2343) V2344))

(defun shen.insert-prolog-variables-help (V2352 V2353 V2354) (cond ((= () V2353) V2352) ((and (cons? V2353) (variable? (hd V2353))) (let V (shen.newpv V2354) (let XV/Y (subst V (hd V2353) V2352) (let Z-Y (remove (hd V2353) (tl V2353)) (shen.insert-prolog-variables-help XV/Y Z-Y V2354))))) ((cons? V2353) (shen.insert-prolog-variables-help V2352 (tl V2353) V2354)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V2356) (let Vector (address-> (value shen.*prologvectors*) V2356 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V2356 1) V2356)))



